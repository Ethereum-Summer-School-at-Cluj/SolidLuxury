{
  "address": "0x2C0F17383672b951B8e9dc9Eec901EEAE6934617",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY_PER_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownersOf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7aa923cbe9588c592503468d4e0499ece2c2a9aa4c3054410cb3a3bd5d1d740b",
  "receipt": {
    "to": null,
    "from": "0xfCc69429171854F1E3Ef4cBF99d035815Ca7f5fB",
    "contractAddress": "0x2C0F17383672b951B8e9dc9Eec901EEAE6934617",
    "transactionIndex": 0,
    "gasUsed": "2104082",
    "logsBloom": "0x
    "blockHash": "0xf41ae2e9fdbaa1fc74f78fdbe8962e91a061c78f49fbfc504943e362f5e28d82",
    "transactionHash": "0x7aa923cbe9588c592503468d4e0499ece2c2a9aa4c3054410cb3a3bd5d1d740b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10087759,
        "transactionHash": "0x7aa923cbe9588c592503468d4e0499ece2c2a9aa4c3054410cb3a3bd5d1d740b",
        "address": "0x2C0F17383672b951B8e9dc9Eec901EEAE6934617",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fcc69429171854f1e3ef4cbf99d035815ca7f5fb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf41ae2e9fdbaa1fc74f78fdbe8962e91a061c78f49fbfc504943e362f5e28d82"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10087759,
        "transactionHash": "0x7aa923cbe9588c592503468d4e0499ece2c2a9aa4c3054410cb3a3bd5d1d740b",
        "address": "0x2C0F17383672b951B8e9dc9Eec901EEAE6934617",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000fcc69429171854f1e3ef4cbf99d035815ca7f5fb",
          "0x000000000000000000000000fcc69429171854f1e3ef4cbf99d035815ca7f5fb"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xf41ae2e9fdbaa1fc74f78fdbe8962e91a061c78f49fbfc504943e362f5e28d82"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10087759,
        "transactionHash": "0x7aa923cbe9588c592503468d4e0499ece2c2a9aa4c3054410cb3a3bd5d1d740b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fcc69429171854f1e3ef4cbf99d035815ca7f5fb",
          "0x000000000000000000000000bb583a9dde59ca64aaa14807f37a4c665c0d72c7"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002057d0ea93508d6000000000000000000000000000000000000000000000002b989785edb6949c00000000000000000000000000000000000000000000000b911b808bd1f1812fb000000000000000000000000000000000000000000000002b783fb50323440ea0000000000000000000000000000000000000000000000b913bd85cbc84d1bd1",
        "logIndex": 2,
        "blockHash": "0xf41ae2e9fdbaa1fc74f78fdbe8962e91a061c78f49fbfc504943e362f5e28d82"
      }
    ],
    "blockNumber": 10087759,
    "cumulativeGasUsed": "2104082",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "SolidLuxuryNFT",
    "SLNFT",
    "0xfCc69429171854F1E3Ef4cBF99d035815Ca7f5fB"
  ],
  "numDeployments": 2,
  "solcInputHash": "8a72f0ea66185cde9674ccfd552f503e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY_PER_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownersOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CARNFT.sol\":\"SolidLuxuryNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x81149353c99ccf8ff18af7701bc3f38665c7a97e344cdc0d27f927f03d22af0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x45381337dbccfb58e9443257ba1850070be892ecacd4b0da7db4c4cfa7df0b09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CARNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\r\\n\\r\\ncontract SolidLuxuryNFT is ERC1155, Ownable, ERC1155Burnable {\\r\\n    mapping(uint256 => string) public tokenURI;\\r\\n    mapping(uint256 => uint256) public totalSupply; // track total supply on each nft(id)\\r\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\r\\n\\r\\n    // track all owners of each token ID\\r\\n    mapping(uint256 => address[]) private _owners;\\r\\n    mapping(uint256 => mapping(address => bool)) private _ownerExists;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint256 public constant MAX_SUPPLY_PER_ID = 10;\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _initialOwner\\r\\n    ) ERC1155(\\\"\\\") Ownable() {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        transferOwnership(_initialOwner);\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 amount,\\r\\n        bytes memory data\\r\\n    ) public onlyOwner {\\r\\n        require( totalSupply[id] + amount <= MAX_SUPPLY_PER_ID, \\\"Minting limit exceeded\\\");\\r\\n\\r\\n        totalSupply[id] += amount;\\r\\n        _mint(account, id, amount, data);\\r\\n        _addOwner(id, account, amount);\\r\\n    }\\r\\n\\r\\n    function setURI(uint256 _id, string memory _uri) external onlyOwner {\\r\\n        tokenURI[_id] = _uri;\\r\\n        emit URI(_uri, _id);\\r\\n    }\\r\\n\\r\\n    function _addOwner(uint256 id, address owner, uint256 amount) internal {\\r\\n        if (!_ownerExists[id][owner]) {\\r\\n            _owners[id].push(owner);\\r\\n            _ownerExists[id][owner] = true;\\r\\n        }\\r\\n         _balances[id][owner] += amount;\\r\\n    }\\r\\n\\r\\n    function _removeOwner(uint256 id, address owner) internal {\\r\\n        if (_ownerExists[id][owner]) {\\r\\n            _balances[id][owner] = 0;\\r\\n            _ownerExists[id][owner] = false;\\r\\n            // Remove owner from _owners list\\r\\n            address[] storage owners = _owners[id];\\r\\n            for (uint i = 0; i < owners.length; i++) {\\r\\n                if (owners[i] == owner) {\\r\\n                    owners[i] = owners[owners.length - 1];\\r\\n                    owners.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal virtual override {\\r\\n        super._safeTransferFrom(from, to, id, value, data);\\r\\n\\r\\n        if (from != address(0)) { // From address is not zero, meaning it's a transfer or burn\\r\\n            _balances[id][from] -= value;\\r\\n            if (_balances[id][from] == 0) {\\r\\n                _removeOwner(id, from);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to != address(0)) { // To address is not zero, meaning it's a transfer or mint\\r\\n            if (!_ownerExists[id][to]) {\\r\\n                _owners[id].push(to);\\r\\n                _ownerExists[id][to] = true;\\r\\n            }\\r\\n            _balances[id][to] += value;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function uri(uint256 _id) public view override returns (string memory) {\\r\\n        return tokenURI[_id];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account, uint256 id)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[id][account];\\r\\n    }\\r\\n\\r\\n    function ownersOf(uint256 id) external view returns (address[] memory) {\\r\\n        return _owners[id];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd488da6e8e89d34bfdf5f5373084c74e5eebf91631588fdbebee687f1223ca7a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620027f3380380620027f3833981016040819052620000349162000296565b6040805160208101909152600081526200004e816200008c565b506200005a336200009e565b6009620000688482620003b2565b50600a620000778382620003b2565b506200008381620000f0565b5050506200047e565b60026200009a8282620003b2565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620000fa62000173565b6001600160a01b038116620001655760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b62000170816200009e565b50565b6003546001600160a01b03163314620001cf5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200015c565b565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001f957600080fd5b81516001600160401b0380821115620002165762000216620001d1565b604051601f8301601f19908116603f01168101908282118183101715620002415762000241620001d1565b816040528381526020925086838588010111156200025e57600080fd5b600091505b8382101562000282578582018301518183018401529082019062000263565b600093810190920192909252949350505050565b600080600060608486031215620002ac57600080fd5b83516001600160401b0380821115620002c457600080fd5b620002d287838801620001e7565b94506020860151915080821115620002e957600080fd5b50620002f886828701620001e7565b604086015190935090506001600160a01b03811681146200031857600080fd5b809150509250925092565b600181811c908216806200033857607f821691505b6020821081036200035957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003ad57600081815260208120601f850160051c81016020861015620003885750805b601f850160051c820191505b81811015620003a95782815560010162000394565b5050505b505050565b81516001600160401b03811115620003ce57620003ce620001d1565b620003e681620003df845462000323565b846200035f565b602080601f8311600181146200041e5760008415620004055750858301515b600019600386901b1c1916600185901b178555620003a9565b600085815260208120601f198616915b828110156200044f578886015182559484019460019091019084016200042e565b50858210156200046e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612365806200048e6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b8578063c87b56dd1161007c578063c87b56dd14610298578063cbb2e55e146102ab578063e985e9c5146102b3578063f242432a146102ef578063f2fde38b14610302578063f5298aca1461031557600080fd5b80638da5cb5b1461022257806395d89b411461023d578063a22cb46514610245578063a584ab2914610258578063bd85b0391461027857600080fd5b80634e1273f4116100ff5780634e1273f4146101c15780636b20c454146101e1578063715018a6146101f4578063731133e9146101fc578063862440e21461020f57600080fd5b8062fdd58e1461013b57806301ffc9a71461016157806306fdde03146101845780630e89341c146101995780632eb2c2d6146101ac575b600080fd5b61014e610149366004611762565b610328565b6040519081526020015b60405180910390f35b61017461016f3660046117a2565b610352565b6040519015158152602001610158565b61018c6103a2565b604051610158919061180c565b61018c6101a736600461181f565b610430565b6101bf6101ba36600461198e565b6104d2565b005b6101d46101cf366004611a38565b610527565b6040516101589190611b3e565b6101bf6101ef366004611b51565b610651565b6101bf610699565b6101bf61020a366004611bc5565b6106ad565b6101bf61021d366004611c26565b61075a565b6003546040516001600160a01b039091168152602001610158565b61018c6107b7565b6101bf610253366004611c77565b6107c4565b61026b61026636600461181f565b6107d3565b6040516101589190611cb3565b61014e61028636600461181f565b60056020526000908152604090205481565b61018c6102a636600461181f565b61083e565b61014e600a81565b6101746102c1366004611d00565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101bf6102fd366004611d33565b610857565b6101bf610310366004611d98565b61089c565b6101bf610323366004611db3565b610915565b60008181526006602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061038357506001600160e01b031982166303a24d0760e21b145b8061034c57506301ffc9a760e01b6001600160e01b031983161461034c565b600980546103af90611de6565b80601f01602080910402602001604051908101604052809291908181526020018280546103db90611de6565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081565b600081815260046020526040902080546060919061044d90611de6565b80601f016020809104026020016040519081016040528092919081815260200182805461047990611de6565b80156104c65780601f1061049b576101008083540402835291602001916104c6565b820191906000526020600020905b8154815290600101906020018083116104a957829003601f168201915b50505050509050919050565b6001600160a01b0385163314806104ee57506104ee85336102c1565b6105135760405162461bcd60e51b815260040161050a90611e20565b60405180910390fd5b6105208585858585610958565b5050505050565b6060815183511461058c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161050a565b6000835167ffffffffffffffff8111156105a8576105a8611838565b6040519080825280602002602001820160405280156105d1578160200160208202803683370190505b50905060005b84518110156106495761061c8582815181106105f5576105f5611e6e565b602002602001015185838151811061060f5761060f611e6e565b6020026020010151610328565b82828151811061062e5761062e611e6e565b602090810291909101015261064281611e9a565b90506105d7565b509392505050565b6001600160a01b03831633148061066d575061066d83336102c1565b6106895760405162461bcd60e51b815260040161050a90611e20565b610694838383610af4565b505050565b6106a1610c7e565b6106ab6000610cd8565b565b6106b5610c7e565b600083815260056020526040902054600a906106d2908490611eb3565b11156107195760405162461bcd60e51b8152602060048201526016602482015275135a5b9d1a5b99c81b1a5b5a5d08195e18d95959195960521b604482015260640161050a565b60008381526005602052604081208054849290610737908490611eb3565b90915550610749905084848484610d2a565b610754838584610e3e565b50505050565b610762610c7e565b600082815260046020526040902061077a8282611f0c565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516107ab919061180c565b60405180910390a25050565b600a80546103af90611de6565b6107cf338383610f00565b5050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156104c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108155750505050509050919050565b600460205260009081526040902080546103af90611de6565b6001600160a01b038516331480610873575061087385336102c1565b61088f5760405162461bcd60e51b815260040161050a90611e20565b6105208585858585610fe0565b6108a4610c7e565b6001600160a01b0381166109095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050a565b61091281610cd8565b50565b6001600160a01b038316331480610931575061093183336102c1565b61094d5760405162461bcd60e51b815260040161050a90611e20565b610694838383611139565b81518351146109795760405162461bcd60e51b815260040161050a90611fcc565b6001600160a01b03841661099f5760405162461bcd60e51b815260040161050a90612014565b3360005b8451811015610a865760008582815181106109c0576109c0611e6e565b6020026020010151905060008583815181106109de576109de611e6e565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610a2e5760405162461bcd60e51b815260040161050a90612059565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610a6b908490611eb3565b9250508190555050505080610a7f90611e9a565b90506109a3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ad69291906120a3565b60405180910390a4610aec81878787878761123d565b505050505050565b6001600160a01b038316610b1a5760405162461bcd60e51b815260040161050a906120d1565b8051825114610b3b5760405162461bcd60e51b815260040161050a90611fcc565b604080516020810190915260009081905233905b8351811015610c11576000848281518110610b6c57610b6c611e6e565b602002602001015190506000848381518110610b8a57610b8a611e6e565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610bda5760405162461bcd60e51b815260040161050a90612114565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610c0981611e9a565b915050610b4f565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610c629291906120a3565b60405180910390a4604080516020810190915260009052610754565b6003546001600160a01b031633146106ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050a565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416610d8a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161050a565b336000610d9685611398565b90506000610da385611398565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610dd5908490611eb3565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e35836000898989896113e3565b50505050505050565b60008381526008602090815260408083206001600160a01b038616845290915290205460ff16610ec45760008381526007602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b03881690811790915587855260088452828520908552909252909120805460ff191690911790555b60008381526006602090815260408083206001600160a01b038616845290915281208054839290610ef6908490611eb3565b9091555050505050565b816001600160a01b0316836001600160a01b031603610f735760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161050a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fed858585858561149e565b6001600160a01b038516156110665760008381526006602090815260408083206001600160a01b03891684529091528120805484929061102e908490612158565b909155505060008381526006602090815260408083206001600160a01b038916845290915281205490036110665761106683866115c8565b6001600160a01b038416156105205760008381526008602090815260408083206001600160a01b038816845290915290205460ff166110fb5760008381526007602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b038a1690811790915587855260088452828520908552909252909120805460ff191690911790555b60008381526006602090815260408083206001600160a01b03881684529091528120805484929061112d908490611eb3565b90915550505050505050565b6001600160a01b03831661115f5760405162461bcd60e51b815260040161050a906120d1565b33600061116b84611398565b9050600061117884611398565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156111c55760405162461bcd60e51b815260040161050a90612114565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610e35565b6001600160a01b0384163b15610aec5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611281908990899088908890889060040161216b565b6020604051808303816000875af19250505080156112bc575060408051601f3d908101601f191682019092526112b9918101906121c9565b60015b611368576112c86121e6565b806308c379a00361130157506112dc612202565b806112e75750611303565b8060405162461bcd60e51b815260040161050a919061180c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161050a565b6001600160e01b0319811663bc197c8160e01b14610e355760405162461bcd60e51b815260040161050a9061228c565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106113d2576113d2611e6e565b602090810291909101015292915050565b6001600160a01b0384163b15610aec5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061142790899089908890889088906004016122d4565b6020604051808303816000875af1925050508015611462575060408051601f3d908101601f1916820190925261145f918101906121c9565b60015b61146e576112c86121e6565b6001600160e01b0319811663f23a6e6160e01b14610e355760405162461bcd60e51b815260040161050a9061228c565b6001600160a01b0384166114c45760405162461bcd60e51b815260040161050a90612014565b3360006114d085611398565b905060006114dd85611398565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156115205760405162461bcd60e51b815260040161050a90612059565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061155d908490611eb3565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115bd848a8a8a8a8a6113e3565b505050505050505050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16156107cf5760008281526006602090815260408083206001600160a01b038516808552908352818420849055858452600883528184209084528252808320805460ff1916905584835260079091528120905b815481101561075457826001600160a01b031682828154811061166557611665611e6e565b6000918252602090912001546001600160a01b031603611734578154829061168f90600190612158565b8154811061169f5761169f611e6e565b9060005260206000200160009054906101000a90046001600160a01b03168282815481106116cf576116cf611e6e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061170d5761170d612319565b600082815260209020810160001990810180546001600160a01b0319169055019055610754565b8061173e81611e9a565b915050611640565b80356001600160a01b038116811461175d57600080fd5b919050565b6000806040838503121561177557600080fd5b61177e83611746565b946020939093013593505050565b6001600160e01b03198116811461091257600080fd5b6000602082840312156117b457600080fd5b81356117bf8161178c565b9392505050565b6000815180845260005b818110156117ec576020818501810151868301820152016117d0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006117bf60208301846117c6565b60006020828403121561183157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561187457611874611838565b6040525050565b600067ffffffffffffffff82111561189557611895611838565b5060051b60200190565b600082601f8301126118b057600080fd5b813560206118bd8261187b565b6040516118ca828261184e565b83815260059390931b85018201928281019150868411156118ea57600080fd5b8286015b8481101561190557803583529183019183016118ee565b509695505050505050565b600067ffffffffffffffff83111561192a5761192a611838565b604051611941601f8501601f19166020018261184e565b80915083815284848401111561195657600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261197f57600080fd5b6117bf83833560208501611910565b600080600080600060a086880312156119a657600080fd5b6119af86611746565b94506119bd60208701611746565b9350604086013567ffffffffffffffff808211156119da57600080fd5b6119e689838a0161189f565b945060608801359150808211156119fc57600080fd5b611a0889838a0161189f565b93506080880135915080821115611a1e57600080fd5b50611a2b8882890161196e565b9150509295509295909350565b60008060408385031215611a4b57600080fd5b823567ffffffffffffffff80821115611a6357600080fd5b818501915085601f830112611a7757600080fd5b81356020611a848261187b565b604051611a91828261184e565b83815260059390931b8501820192828101915089841115611ab157600080fd5b948201945b83861015611ad657611ac786611746565b82529482019490820190611ab6565b96505086013592505080821115611aec57600080fd5b50611af98582860161189f565b9150509250929050565b600081518084526020808501945080840160005b83811015611b3357815187529582019590820190600101611b17565b509495945050505050565b6020815260006117bf6020830184611b03565b600080600060608486031215611b6657600080fd5b611b6f84611746565b9250602084013567ffffffffffffffff80821115611b8c57600080fd5b611b988783880161189f565b93506040860135915080821115611bae57600080fd5b50611bbb8682870161189f565b9150509250925092565b60008060008060808587031215611bdb57600080fd5b611be485611746565b93506020850135925060408501359150606085013567ffffffffffffffff811115611c0e57600080fd5b611c1a8782880161196e565b91505092959194509250565b60008060408385031215611c3957600080fd5b82359150602083013567ffffffffffffffff811115611c5757600080fd5b8301601f81018513611c6857600080fd5b611af985823560208401611910565b60008060408385031215611c8a57600080fd5b611c9383611746565b915060208301358015158114611ca857600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611cf45783516001600160a01b031683529284019291840191600101611ccf565b50909695505050505050565b60008060408385031215611d1357600080fd5b611d1c83611746565b9150611d2a60208401611746565b90509250929050565b600080600080600060a08688031215611d4b57600080fd5b611d5486611746565b9450611d6260208701611746565b93506040860135925060608601359150608086013567ffffffffffffffff811115611d8c57600080fd5b611a2b8882890161196e565b600060208284031215611daa57600080fd5b6117bf82611746565b600080600060608486031215611dc857600080fd5b611dd184611746565b95602085013595506040909401359392505050565b600181811c90821680611dfa57607f821691505b602082108103611e1a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611eac57611eac611e84565b5060010190565b8082018082111561034c5761034c611e84565b601f82111561069457600081815260208120601f850160051c81016020861015611eed5750805b601f850160051c820191505b81811015610aec57828155600101611ef9565b815167ffffffffffffffff811115611f2657611f26611838565b611f3a81611f348454611de6565b84611ec6565b602080601f831160018114611f6f5760008415611f575750858301515b600019600386901b1c1916600185901b178555610aec565b600085815260208120601f198616915b82811015611f9e57888601518255948401946001909101908401611f7f565b5085821015611fbc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006120b66040830185611b03565b82810360208401526120c88185611b03565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b8181038181111561034c5761034c611e84565b6001600160a01b0386811682528516602082015260a06040820181905260009061219790830186611b03565b82810360608401526121a98186611b03565b905082810360808401526121bd81856117c6565b98975050505050505050565b6000602082840312156121db57600080fd5b81516117bf8161178c565b600060033d11156121ff5760046000803e5060005160e01c5b90565b600060443d10156122105790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561224057505050505090565b82850191508151818111156122585750505050505090565b843d87010160208285010111156122725750505050505090565b6122816020828601018761184e565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061230e908301846117c6565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220fc7b0c9d0c8ad599cc656f3680918b56d8648a2adeea9f7ce938cfa50a1983a664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b8578063c87b56dd1161007c578063c87b56dd14610298578063cbb2e55e146102ab578063e985e9c5146102b3578063f242432a146102ef578063f2fde38b14610302578063f5298aca1461031557600080fd5b80638da5cb5b1461022257806395d89b411461023d578063a22cb46514610245578063a584ab2914610258578063bd85b0391461027857600080fd5b80634e1273f4116100ff5780634e1273f4146101c15780636b20c454146101e1578063715018a6146101f4578063731133e9146101fc578063862440e21461020f57600080fd5b8062fdd58e1461013b57806301ffc9a71461016157806306fdde03146101845780630e89341c146101995780632eb2c2d6146101ac575b600080fd5b61014e610149366004611762565b610328565b6040519081526020015b60405180910390f35b61017461016f3660046117a2565b610352565b6040519015158152602001610158565b61018c6103a2565b604051610158919061180c565b61018c6101a736600461181f565b610430565b6101bf6101ba36600461198e565b6104d2565b005b6101d46101cf366004611a38565b610527565b6040516101589190611b3e565b6101bf6101ef366004611b51565b610651565b6101bf610699565b6101bf61020a366004611bc5565b6106ad565b6101bf61021d366004611c26565b61075a565b6003546040516001600160a01b039091168152602001610158565b61018c6107b7565b6101bf610253366004611c77565b6107c4565b61026b61026636600461181f565b6107d3565b6040516101589190611cb3565b61014e61028636600461181f565b60056020526000908152604090205481565b61018c6102a636600461181f565b61083e565b61014e600a81565b6101746102c1366004611d00565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101bf6102fd366004611d33565b610857565b6101bf610310366004611d98565b61089c565b6101bf610323366004611db3565b610915565b60008181526006602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061038357506001600160e01b031982166303a24d0760e21b145b8061034c57506301ffc9a760e01b6001600160e01b031983161461034c565b600980546103af90611de6565b80601f01602080910402602001604051908101604052809291908181526020018280546103db90611de6565b80156104285780601f106103fd57610100808354040283529160200191610428565b820191906000526020600020905b81548152906001019060200180831161040b57829003601f168201915b505050505081565b600081815260046020526040902080546060919061044d90611de6565b80601f016020809104026020016040519081016040528092919081815260200182805461047990611de6565b80156104c65780601f1061049b576101008083540402835291602001916104c6565b820191906000526020600020905b8154815290600101906020018083116104a957829003601f168201915b50505050509050919050565b6001600160a01b0385163314806104ee57506104ee85336102c1565b6105135760405162461bcd60e51b815260040161050a90611e20565b60405180910390fd5b6105208585858585610958565b5050505050565b6060815183511461058c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161050a565b6000835167ffffffffffffffff8111156105a8576105a8611838565b6040519080825280602002602001820160405280156105d1578160200160208202803683370190505b50905060005b84518110156106495761061c8582815181106105f5576105f5611e6e565b602002602001015185838151811061060f5761060f611e6e565b6020026020010151610328565b82828151811061062e5761062e611e6e565b602090810291909101015261064281611e9a565b90506105d7565b509392505050565b6001600160a01b03831633148061066d575061066d83336102c1565b6106895760405162461bcd60e51b815260040161050a90611e20565b610694838383610af4565b505050565b6106a1610c7e565b6106ab6000610cd8565b565b6106b5610c7e565b600083815260056020526040902054600a906106d2908490611eb3565b11156107195760405162461bcd60e51b8152602060048201526016602482015275135a5b9d1a5b99c81b1a5b5a5d08195e18d95959195960521b604482015260640161050a565b60008381526005602052604081208054849290610737908490611eb3565b90915550610749905084848484610d2a565b610754838584610e3e565b50505050565b610762610c7e565b600082815260046020526040902061077a8282611f0c565b50817f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b826040516107ab919061180c565b60405180910390a25050565b600a80546103af90611de6565b6107cf338383610f00565b5050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156104c657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108155750505050509050919050565b600460205260009081526040902080546103af90611de6565b6001600160a01b038516331480610873575061087385336102c1565b61088f5760405162461bcd60e51b815260040161050a90611e20565b6105208585858585610fe0565b6108a4610c7e565b6001600160a01b0381166109095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161050a565b61091281610cd8565b50565b6001600160a01b038316331480610931575061093183336102c1565b61094d5760405162461bcd60e51b815260040161050a90611e20565b610694838383611139565b81518351146109795760405162461bcd60e51b815260040161050a90611fcc565b6001600160a01b03841661099f5760405162461bcd60e51b815260040161050a90612014565b3360005b8451811015610a865760008582815181106109c0576109c0611e6e565b6020026020010151905060008583815181106109de576109de611e6e565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610a2e5760405162461bcd60e51b815260040161050a90612059565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610a6b908490611eb3565b9250508190555050505080610a7f90611e9a565b90506109a3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ad69291906120a3565b60405180910390a4610aec81878787878761123d565b505050505050565b6001600160a01b038316610b1a5760405162461bcd60e51b815260040161050a906120d1565b8051825114610b3b5760405162461bcd60e51b815260040161050a90611fcc565b604080516020810190915260009081905233905b8351811015610c11576000848281518110610b6c57610b6c611e6e565b602002602001015190506000848381518110610b8a57610b8a611e6e565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610bda5760405162461bcd60e51b815260040161050a90612114565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610c0981611e9a565b915050610b4f565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610c629291906120a3565b60405180910390a4604080516020810190915260009052610754565b6003546001600160a01b031633146106ab5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161050a565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416610d8a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161050a565b336000610d9685611398565b90506000610da385611398565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290610dd5908490611eb3565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610e35836000898989896113e3565b50505050505050565b60008381526008602090815260408083206001600160a01b038616845290915290205460ff16610ec45760008381526007602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b03881690811790915587855260088452828520908552909252909120805460ff191690911790555b60008381526006602090815260408083206001600160a01b038616845290915281208054839290610ef6908490611eb3565b9091555050505050565b816001600160a01b0316836001600160a01b031603610f735760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161050a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610fed858585858561149e565b6001600160a01b038516156110665760008381526006602090815260408083206001600160a01b03891684529091528120805484929061102e908490612158565b909155505060008381526006602090815260408083206001600160a01b038916845290915281205490036110665761106683866115c8565b6001600160a01b038416156105205760008381526008602090815260408083206001600160a01b038816845290915290205460ff166110fb5760008381526007602090815260408083208054600180820183559185528385200180546001600160a01b0319166001600160a01b038a1690811790915587855260088452828520908552909252909120805460ff191690911790555b60008381526006602090815260408083206001600160a01b03881684529091528120805484929061112d908490611eb3565b90915550505050505050565b6001600160a01b03831661115f5760405162461bcd60e51b815260040161050a906120d1565b33600061116b84611398565b9050600061117884611398565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156111c55760405162461bcd60e51b815260040161050a90612114565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052610e35565b6001600160a01b0384163b15610aec5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611281908990899088908890889060040161216b565b6020604051808303816000875af19250505080156112bc575060408051601f3d908101601f191682019092526112b9918101906121c9565b60015b611368576112c86121e6565b806308c379a00361130157506112dc612202565b806112e75750611303565b8060405162461bcd60e51b815260040161050a919061180c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161050a565b6001600160e01b0319811663bc197c8160e01b14610e355760405162461bcd60e51b815260040161050a9061228c565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106113d2576113d2611e6e565b602090810291909101015292915050565b6001600160a01b0384163b15610aec5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061142790899089908890889088906004016122d4565b6020604051808303816000875af1925050508015611462575060408051601f3d908101601f1916820190925261145f918101906121c9565b60015b61146e576112c86121e6565b6001600160e01b0319811663f23a6e6160e01b14610e355760405162461bcd60e51b815260040161050a9061228c565b6001600160a01b0384166114c45760405162461bcd60e51b815260040161050a90612014565b3360006114d085611398565b905060006114dd85611398565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156115205760405162461bcd60e51b815260040161050a90612059565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061155d908490611eb3565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115bd848a8a8a8a8a6113e3565b505050505050505050565b60008281526008602090815260408083206001600160a01b038516845290915290205460ff16156107cf5760008281526006602090815260408083206001600160a01b038516808552908352818420849055858452600883528184209084528252808320805460ff1916905584835260079091528120905b815481101561075457826001600160a01b031682828154811061166557611665611e6e565b6000918252602090912001546001600160a01b031603611734578154829061168f90600190612158565b8154811061169f5761169f611e6e565b9060005260206000200160009054906101000a90046001600160a01b03168282815481106116cf576116cf611e6e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508180548061170d5761170d612319565b600082815260209020810160001990810180546001600160a01b0319169055019055610754565b8061173e81611e9a565b915050611640565b80356001600160a01b038116811461175d57600080fd5b919050565b6000806040838503121561177557600080fd5b61177e83611746565b946020939093013593505050565b6001600160e01b03198116811461091257600080fd5b6000602082840312156117b457600080fd5b81356117bf8161178c565b9392505050565b6000815180845260005b818110156117ec576020818501810151868301820152016117d0565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006117bf60208301846117c6565b60006020828403121561183157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561187457611874611838565b6040525050565b600067ffffffffffffffff82111561189557611895611838565b5060051b60200190565b600082601f8301126118b057600080fd5b813560206118bd8261187b565b6040516118ca828261184e565b83815260059390931b85018201928281019150868411156118ea57600080fd5b8286015b8481101561190557803583529183019183016118ee565b509695505050505050565b600067ffffffffffffffff83111561192a5761192a611838565b604051611941601f8501601f19166020018261184e565b80915083815284848401111561195657600080fd5b83836020830137600060208583010152509392505050565b600082601f83011261197f57600080fd5b6117bf83833560208501611910565b600080600080600060a086880312156119a657600080fd5b6119af86611746565b94506119bd60208701611746565b9350604086013567ffffffffffffffff808211156119da57600080fd5b6119e689838a0161189f565b945060608801359150808211156119fc57600080fd5b611a0889838a0161189f565b93506080880135915080821115611a1e57600080fd5b50611a2b8882890161196e565b9150509295509295909350565b60008060408385031215611a4b57600080fd5b823567ffffffffffffffff80821115611a6357600080fd5b818501915085601f830112611a7757600080fd5b81356020611a848261187b565b604051611a91828261184e565b83815260059390931b8501820192828101915089841115611ab157600080fd5b948201945b83861015611ad657611ac786611746565b82529482019490820190611ab6565b96505086013592505080821115611aec57600080fd5b50611af98582860161189f565b9150509250929050565b600081518084526020808501945080840160005b83811015611b3357815187529582019590820190600101611b17565b509495945050505050565b6020815260006117bf6020830184611b03565b600080600060608486031215611b6657600080fd5b611b6f84611746565b9250602084013567ffffffffffffffff80821115611b8c57600080fd5b611b988783880161189f565b93506040860135915080821115611bae57600080fd5b50611bbb8682870161189f565b9150509250925092565b60008060008060808587031215611bdb57600080fd5b611be485611746565b93506020850135925060408501359150606085013567ffffffffffffffff811115611c0e57600080fd5b611c1a8782880161196e565b91505092959194509250565b60008060408385031215611c3957600080fd5b82359150602083013567ffffffffffffffff811115611c5757600080fd5b8301601f81018513611c6857600080fd5b611af985823560208401611910565b60008060408385031215611c8a57600080fd5b611c9383611746565b915060208301358015158114611ca857600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611cf45783516001600160a01b031683529284019291840191600101611ccf565b50909695505050505050565b60008060408385031215611d1357600080fd5b611d1c83611746565b9150611d2a60208401611746565b90509250929050565b600080600080600060a08688031215611d4b57600080fd5b611d5486611746565b9450611d6260208701611746565b93506040860135925060608601359150608086013567ffffffffffffffff811115611d8c57600080fd5b611a2b8882890161196e565b600060208284031215611daa57600080fd5b6117bf82611746565b600080600060608486031215611dc857600080fd5b611dd184611746565b95602085013595506040909401359392505050565b600181811c90821680611dfa57607f821691505b602082108103611e1a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611eac57611eac611e84565b5060010190565b8082018082111561034c5761034c611e84565b601f82111561069457600081815260208120601f850160051c81016020861015611eed5750805b601f850160051c820191505b81811015610aec57828155600101611ef9565b815167ffffffffffffffff811115611f2657611f26611838565b611f3a81611f348454611de6565b84611ec6565b602080601f831160018114611f6f5760008415611f575750858301515b600019600386901b1c1916600185901b178555610aec565b600085815260208120601f198616915b82811015611f9e57888601518255948401946001909101908401611f7f565b5085821015611fbc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006120b66040830185611b03565b82810360208401526120c88185611b03565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b8181038181111561034c5761034c611e84565b6001600160a01b0386811682528516602082015260a06040820181905260009061219790830186611b03565b82810360608401526121a98186611b03565b905082810360808401526121bd81856117c6565b98975050505050505050565b6000602082840312156121db57600080fd5b81516117bf8161178c565b600060033d11156121ff5760046000803e5060005160e01c5b90565b600060443d10156122105790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561224057505050505090565b82850191508151818111156122585750505050505090565b843d87010160208285010111156122725750505050505090565b6122816020828601018761184e565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061230e908301846117c6565b979650505050505050565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220fc7b0c9d0c8ad599cc656f3680918b56d8648a2adeea9f7ce938cfa50a1983a664736f6c63430008130033",
  "devdoc": {
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 144,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 146,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1993,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "tokenURI",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1997,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2003,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2008,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2014,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "_ownerExists",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2016,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "name",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 2018,
        "contract": "contracts/CARNFT.sol:SolidLuxuryNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}